{"ast":null,"code":"var _jsxFileName = \"/Users/bryan/Code/booti-backend/booti-admin/analytics/react_dashboard/src/components/Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [chartData, setChartData] = useState([]);\n  const [mixpanelData, setMixpanelData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const reponse = await fetch('http://localhost:3000/api/dashboard');\n      const data = await response.json();\n      if (response.ok) {\n        setMixpanelData(data);\n      } else {\n        console.log('Error fetching Mixpanel data');\n      }\n    };\n    const mixpanelData = {\n      \"A. Tap Drop Marker [Total Events]\": {\n        \"all\": 24\n      },\n      \"B. Tap Finish Collecting Drop [Total Events]\": {\n        \"all\": 3\n      }\n    };\n\n    // Transform the data for Recharts\n    const transformedData = Object.entries(mixpanelData).map(([key, value]) => ({\n      name: key,\n      value: value.all\n    }));\n    setChartData(transformedData);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: chartData,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"value\",\n        fill: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n};\n\n// const Dashboard = () => {\n//   const [mixpanelData, setMixpanelData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   // Fetch Mixpanel data when the component mounts\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch('http://localhost:3000/api/dashboard');\n//         const data = await response.json();\n//         if (response.ok) {\n//           setMixpanelData(data);\n//         } else {\n//           setError('Error fetching Mixpanel data');\n//         }\n//       } catch (err) {\n//         setError('Error fetching data');\n//         console.error(err);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n// //   console.log(mixpanelData);\n\n//   return (\n//     <div>\n//       <h1>Dashboard</h1>\n//       {error && <p>{error}</p>}\n//       {mixpanelData ? (\n//         <div>\n//           <h2>Mixpanel Data:</h2>\n//           <pre>{JSON.stringify(mixpanelData, null, 2)}</pre>\n//         </div>\n//       ) : (\n//         <p>Loading Mixpanel data...</p>\n//       )}\n//     </div>\n//   );\n// };\n_s(Dashboard, \"NyHOzm8dI8S61WFxeEOy455QTok=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","Tooltip","CartesianGrid","ResponsiveContainer","jsxDEV","_jsxDEV","Dashboard","_s","chartData","setChartData","mixpanelData","setMixpanelData","fetchData","reponse","fetch","data","response","json","ok","console","log","transformedData","Object","entries","map","key","value","name","all","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","fill","_c","$RefreshReg$"],"sources":["/Users/bryan/Code/booti-backend/booti-admin/analytics/react_dashboard/src/components/Dashboard.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';\n\n\nconst Dashboard = () => {\n    const [chartData, setChartData] = useState([]);\n    const [mixpanelData, setMixpanelData] = useState(null);\n  \n    useEffect(() => {\n        const fetchData = async () => {\n            const reponse = await fetch('http://localhost:3000/api/dashboard');\n            const data = await response.json();\n                if (response.ok) {\n                    setMixpanelData(data);\n                } else {\n                    console.log('Error fetching Mixpanel data');\n                }\n        }\n        const mixpanelData = {\n            \"A. Tap Drop Marker [Total Events]\": { \"all\": 24 },\n            \"B. Tap Finish Collecting Drop [Total Events]\": { \"all\": 3 }\n        };\n    \n        // Transform the data for Recharts\n        const transformedData = Object.entries(mixpanelData).map(([key, value]) => ({\n            name: key,\n            value: value.all,\n        }));\n    \n        setChartData(transformedData);\n    }, []);\n  \n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <BarChart data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Bar dataKey=\"value\" fill=\"#8884d8\" />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  };\n\n// const Dashboard = () => {\n//   const [mixpanelData, setMixpanelData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   // Fetch Mixpanel data when the component mounts\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch('http://localhost:3000/api/dashboard');\n//         const data = await response.json();\n//         if (response.ok) {\n//           setMixpanelData(data);\n//         } else {\n//           setError('Error fetching Mixpanel data');\n//         }\n//       } catch (err) {\n//         setError('Error fetching data');\n//         console.error(err);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n// //   console.log(mixpanelData);\n\n//   return (\n//     <div>\n//       <h1>Dashboard</h1>\n//       {error && <p>{error}</p>}\n//       {mixpanelData ? (\n//         <div>\n//           <h2>Mixpanel Data:</h2>\n//           <pre>{JSON.stringify(mixpanelData, null, 2)}</pre>\n//         </div>\n//       ) : (\n//         <p>Loading Mixpanel data...</p>\n//       )}\n//     </div>\n//   );\n// };\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}