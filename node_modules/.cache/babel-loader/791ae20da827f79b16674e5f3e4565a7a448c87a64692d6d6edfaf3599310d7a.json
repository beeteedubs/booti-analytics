{"ast":null,"code":"var _jsxFileName = \"/Users/bryan/Code/booti-backend/booti-admin/analytics/react_dashboard/src/components/Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [mixpanelData, setMixpanelData] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Assuming mixpanelData is your JSON data from the API response\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/dashboard');\n        const data = await response.json();\n        if (response.ok) {\n          setMixpanelData(data);\n        } else {\n          setError('Error fetching Mixpanel data');\n        }\n      } catch (err) {\n        setError('Error fetching data');\n        console.error(err);\n      }\n    };\n\n    // Transform the data for Recharts\n    const transformedData = Object.entries(fetchData).map(([key, value]) => ({\n      name: key,\n      value: value.all\n    }));\n    setChartData(transformedData);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 400,\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: chartData,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"value\",\n        fill: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 7\n  }, this);\n};\n_s(Dashboard, \"fWQSpa58SKhfIl9Inlz3AZvKgYI=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","Tooltip","CartesianGrid","ResponsiveContainer","jsxDEV","_jsxDEV","Dashboard","_s","mixpanelData","setMixpanelData","chartData","setChartData","error","setError","fetchData","response","fetch","data","json","ok","err","console","transformedData","Object","entries","map","key","value","name","all","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","fill","_c","$RefreshReg$"],"sources":["/Users/bryan/Code/booti-backend/booti-admin/analytics/react_dashboard/src/components/Dashboard.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';\n\n\nconst Dashboard = () => {\n    const [mixpanelData, setMixpanelData] = useState(null);\n    const [chartData, setChartData] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n      // Assuming mixpanelData is your JSON data from the API response\n      const fetchData = async () => {\n        try {\n          const response = await fetch('http://localhost:3000/api/dashboard');\n          const data = await response.json();\n          if (response.ok) {\n            setMixpanelData(data);\n          } else {\n            setError('Error fetching Mixpanel data');\n          }\n        } catch (err) {\n          setError('Error fetching data');\n          console.error(err);\n        }\n      };\n  \n      // Transform the data for Recharts\n      const transformedData = Object.entries(fetchData).map(([key, value]) => ({\n        name: key,\n        value: value.all,\n      }));\n  \n      setChartData(transformedData);\n    }, []);\n  \n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <BarChart data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Bar dataKey=\"value\" fill=\"#8884d8\" />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  };\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}